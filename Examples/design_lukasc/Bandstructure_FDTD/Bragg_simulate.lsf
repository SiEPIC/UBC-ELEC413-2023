#
#    Bragg grating Lumerical simulation flow
#    see https://github.com/mustafacc/SiEPIC_Photonics_Package/ for documentation
#
#    Author: Mustafa Hammood   ; mustafa@siepic.com   ; mustafa@ece.ubc.ca
#    SiEPIC Kits Ltd. 2020     ; University of British Columbia
#
#    (c)2020

#############################
# Simulate device           #
#############################

f1 = c/wl_max;
f2 = c/wl_min;
x_source = period/4;

apod_center = 0.5; # you can ignore this :))
apod_width = 0.125; # you can ignore this :))
kx = 0.5; # you can ignore this :))

sim_y_span = W*3 + dW*5;
sim_z_span = thickness_device*6;

# add fine mesh region
addmesh;
setnamed('mesh', 'override x mesh',0);
setnamed('mesh', 'x',0);
setnamed('mesh', 'x span',period);
setnamed('mesh', 'y',0);
setnamed('mesh', 'y span',W*1.5);
setnamed('mesh', 'z', thickness_device/2);
setnamed('mesh', 'z span',thickness_device*2 );
setnamed('mesh', 'dx',mesh_x);
setnamed('mesh', 'dy',mesh_y);
setnamed('mesh', 'dz',mesh_z);

# add FDTD simulation region and configure size
addfdtd;
setnamed('FDTD',"y", 0);
setnamed('FDTD',"y span", sim_y_span);
setnamed('FDTD',"z", 0);
setnamed('FDTD',"z span", sim_z_span );
setnamed('FDTD',"x min", -period/2);
setnamed('FDTD',"x max", period/2);
setnamed('FDTD',"x min bc", "Bloch");
setnamed('FDTD',"mesh accuracy", mesh);
setnamed('FDTD',"simulation time",sim_time);
setnamed('FDTD',"bloch units","SI");        # we generally use bandstructure units, but for the simulation region, it's 
setnamed('FDTD',"set based on source angle",0);
setnamed('FDTD',"kx",kx*2*pi/period);
if( pol == 'TE' ){
    setnamed('FDTD', 'y min bc', 'anti-symmetric');
}
else{
    setnamed('FDTD', 'y min bc', 'PML');
}

# add bandstructure analysis group
addobject('bandstructure');
select('bandstructure');
setnamed('bandstructure', 'x', 0);
setnamed('bandstructure', 'x span', period);
if( pol == 'TE' ){
    setnamed('bandstructure', 'y', W/2);
    setnamed('bandstructure', 'y span', W/2);

}
else{
    setnamed('bandstructure', 'y', 0);
    setnamed('bandstructure', 'y span', W);
}
setnamed('bandstructure', 'z', thickness_device/2);
setnamed('bandstructure', 'z span', 2*thickness_device);
setnamed('bandstructure', 'f1', f1);
setnamed('bandstructure', 'f2', f2);

addanalysisprop('apod_width',0,0.125);
addanalysisprop('apod_center',0,0.4);
setnamed('bandstructure', 'analysis script','
# simplify variable names by removing spaces
apod_width = %apod_width%;
apod_center = %apod_center%;
n_monitors = %n monitors%;

if (f1<=0){f1 = f2/10000;}

t = getdata("m1","t");
fs = 0;

# loop over each time monitor
for(j=1:n_monitors) {
  for (component_i=1:3) { # loop over field components
    if (component_i==1) { component="Ex"; }
    if (component_i==2) { component="Ey"; }
    if (component_i==3) { component="Ez"; }
    
    signal = pinch(getdata("m"+num2str(j),component)); # collect the field data

    #apodize the signal with a gaussian, to ignore start and end effects
    signal = signal*exp( - 0.5*(t-max(t)*apod_center)^2/(apod_width*max(t))^2);
    f = linspace(f1,f2,5000);
    fs = fs + abs(czt(signal,t,2*pi*f))^2;
  }
}

# create data set
spectrum = matrixdataset("spectrum");
spectrum.addparameter("f",f,"lambda",c/f);   # in most cases, lambda is before f in datasets.  However, for this particular application, frequency is far more common, so it is first.
spectrum.addattribute("fs",fs);
');

# add mode source
addmode;
setnamed('source', 'injection axis', 'x-axis');
setnamed('source', 'x', x_source);
setnamed('source', 'y span', sim_y_span);
setnamed('source', 'z', thickness_device/2); 
setnamed('source', 'z span', sim_z_span);
if(x_source < 0){
    setnamed('source', 'direction', 'forward');
}
else{
    setnamed('source', 'direction', 'backward');
}
setnamed('source', 'wavelength start', wl_min+20e-9);
setnamed('source', 'wavelength stop', wl_max-40e-9);
if( pol == 'TE' ){
    setnamed('source', 'mode selection', 'fundamental TE mode');
}
else{
    setnamed('source', 'mode selection', 'fundamental TM mode');
}

# modify model setup
select('::model');
adduserprop('f1', 4, f1);
adduserprop('f2', 4, f2);
adduserprop('apod_center', 0, apod_center);
adduserprop('apod_width', 0, apod_width);
adduserprop('ax', 2, period);
adduserprop('kx', 0, kx);
adduserprop('w', 2, dW);

myscript ="spectrum = getresult('bandstructure','spectrum'); \n";
myscript = myscript + "fs = spectrum.fs; \n";
myscript = myscript + "lambda = spectrum.lambda; \n";
myscript = myscript + "temp = fs(1:length(lambda)); \n";
myscript = myscript + "ind = findpeaks(temp,2); \n";
myscript = myscript + "bandwidth = abs(lambda(ind(2))-lambda(ind(1))); \n";
myscript = myscript + "center_wavelength = lambda(ind(1)) + bandwidth/2; \n";
myscript = myscript + "ng = " + num2str(ng) + "; \n"; 
myscript = myscript + "kappa = pi*ng*bandwidth/(center_wavelength^2); \n";
set("analysis script", myscript); 
addanalysisresult("kappa");
addanalysisresult("bandwidth");
addanalysisresult("center_wavelength");


run;